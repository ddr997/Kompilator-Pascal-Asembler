decl: ID list {symtable[$1].type=(vartype)$2;
               symtable[$1].address=next_adress;
               if($2 == integer){
                 next_adress += 4;
               };
               if($2 == real){
                 next_adress += 8;
               };}

list: ',' ID list {$$=$3;
                  symtable[$2].type=(vartype)$3;
                  symtable[$2].address=next_adress;
                  if($3 == integer){
                    next_adress += 4;
                  }
                  if($3 == real){
                  next_adress += 8;
                  }}
    | ':' type    {$$=$2;}





%{
#include "global.h"
unsigned next_adress = 0;
%}

%token T_PROGRAM
%token T_VAR
%token T_INTEGER
%token T_REAL
%token ID

%%
start: program {for(int i=0;i<symtable.size();i++) cout << symtable[i].name<< " " <<symtable[i].type<< " " <<symtable[i].address <<endl;}

program: T_PROGRAM ID '(' identifier_list ')';
        declarations

identifier_list: ID 
                  {
                  symtable[$1].
                  }
               | identifier_list ',' ID

declarations:  declarations T_VAR identifier_list ':' type ';'
                {
                symtable[$3].type=(vartype)$5;
                symtable[$3].address=next_adress;
                if($5 == integer){
                next_adress += 4;}
                if($5 == real){
                next_adress += 8;}
                }       
            | %empty

type: T_INTEGER {$$ = integer;}
    | T_REAL {$$ = real;}


%%
void yyerror(char const *s)
{
  printf("%s\n",s);
};

int main()
{
  yyparse();
};

symtable_t symtable;

int addtotable(const string& s)
{
  int i;
  for(i=0;i<symtable.size();i++) //przeszukaj tablice symboli
    if(symtable[i].name==s) // jezeli podana nazwa juz jest w tablicy
      return i; //zwroc indeks tablicy
  entry d; //ze struktury entry
  d.name=s; //nazwa identyfikatora
  d.type=none; //typ bedzie 0
  symtable.push_back(d); //dodaje na koniec wektora nowy element
  return i; //zwroc indeks z tablicy, jezeli nie znalazlo to bedzie na koncu?
};

int findintable(const string& s)
{
  int i;
  for(i=0;i<symtable.size();i++)
    if(symtable[i].name==s)
      return i;
  return -1; //w innym wypadku nie ma jej w tablicy symboli
};

void gencode(const string& m, int i1, int i2, int i3){

}



#include <string>
#include <vector>
#include <iostream>
#include <stdio.h>

using namespace std;

enum vartype {none, integer, real}; //0 - none; 1 - integerl 2 - real
struct entry {
std::string name; //nazwa
vartype type; //typ (0,1,2)
unsigned address; //adres
};

typedef vector<entry> symtable_t; //wektor typu entry)struktury o nazwie symtable_t - _t to konwencja nazywana typow danych

extern symtable_t symtable; //deklaracja zmiennej symtable (nie definicja)

int addtotable(const string& s);
int findintable(const string& s);





int yylex();
void yyerror(char const *);









compound_statement: T_BEGIN statement_list T_END 

statement_list: statement
              | statement_list ';' statement

statement: ID ':' '=' expression {
          }

expression: expression '+' expression {
            $$ = $1 + $3;
            }
          | expression '*' expression {$$ = $1 * $3}
          | '-' expression {$$ = $2}
          | '(' expression ')' {$$ = $2}
          | ID {$$ = $1} //zawiera miejsce w tablicy symboli
          | NUMBER {$$ = $1} //tutaj tez bedzie chyba